esphome:
  name: thermostat
  platform: ESP8266
  board: d1_mini
  on_boot:
    then:
      - lambda: "id(oled_brightness).publish_state(0.4);"
      
substitutions:
  default_low: "21.0"
  default_hi: "23.0"
  away_low: "17.0"
  away_hi: "27.0"
  fan_auto_on_time: 15min
  fan_auto_off_time: 15min

wifi:
  ssid: !secret wifissid
  password: !secret wifipass
    
  manual_ip:
    static_ip: 10.0.3.2
    gateway: 10.0.0.1
    subnet: 255.0.0.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Thermostat Fallback Hotspot"
    password: !secret fallback

logger:
  logs:
    climate: none
    sensor: none

api:
ota:

i2c:

switch:
  - platform: template
    id: set_min_max
    optimistic: true
  - platform: gpio
    id: relay_stage2
    pin: D8
  - platform: gpio
    id: relay_heater
    pin: D7
    inverted: true
  - platform: gpio
    id: relay_cooler
    pin: D6
    inverted: true
  - platform: gpio
    id: relay_fan
    pin: D5
    inverted: true
  - platform: template
    id: brightness
    optimistic: true

#away_preset - 513
#home_preset - 257
#fan_mode_on - 1
#fan_mode_off - 257
#fan_mode_auto - 513

globals:
  - id: setmode
    type: int
    restore_value: no
    initial_value: '0'
  - id: fansetmode
    type: int
    restore_value: no
    initial_value: '0'
  - id: presetmode
    type: int
    restore_value: no
    initial_value: '0'

text_sensor:
  - platform: template
    name: "Current Mode"
    id: currentmode
    lambda: |-
      if(id(this_thermostat).mode == 0) {return {"Off"};}
      if(id(this_thermostat).mode == 1) {return {"Ht/Cl"};}
      if(id(this_thermostat).mode == 2) {return {"Cool"};}
      if(id(this_thermostat).mode == 3) {return {"Heat"};}
    update_interval: 60s
  - platform: template
    id: menutext
    lambda: |-
      if(id(setmode) == 0) {return {"Off"};}
      if(id(setmode) == 1) {return {"Heat/Cool"};}
      if(id(setmode) == 2) {return {"Cool"};}
      if(id(setmode) == 3) {return {"Heat"};}
      if(id(setmode) == 4) {return {"Fan Mode"};}
      if(id(setmode) == 5) {return {"Away Mode"};}
  - platform: template
    id: fanmenutext
    lambda: |-
      if(id(fansetmode) == 0) {return {"On"};}
      if(id(fansetmode) == 1) {return {"Off"};}
      if(id(fansetmode) == 2) {return {"Auto"};}
  - platform: template
    id: presetmenutext
    lambda: |-
      if(id(presetmode) == 1) {return {"Home"};}
      if(id(presetmode) == 2) {return {"Away"};}

binary_sensor:
  - platform: gpio
    id: button
    pin: 
      number: D4
      inverted: true
    on_press:
      - if:
          condition:
            and:
              - lambda: "return id(this_thermostat).mode == 1;"
              - display.is_displaying_page: mainpage
          then:
            - switch.toggle: set_min_max
      - if:
          condition:
            display.is_displaying_page: submenu
          then:
            - if:
                condition:
                  lambda: "return id(setmode) == 4;"
                then:
                  - lambda: ESP_LOGD("main", "Fan submenu click. Going back to main page. fansetmode is %d", id(fansetmode));
                  - lambda: |-
                      auto call = id(this_thermostat).make_call();
                      call.set_fan_mode(id(fanmenutext).state.c_str());
                      call.perform();
                  - display.page.show: mainpage
                else:
                  - lambda: ESP_LOGD("main", "Preset submenu click. Going back to main page. presetmode is %d", id(presetmode));
                  - lambda: |-
                      auto call = id(this_thermostat).make_call();
                      call.set_preset(id(presetmenutext).state.c_str());
                      call.perform();
                  - display.page.show: mainpage
      - if:
          condition:
            display.is_displaying_page: menu
          then:
            - if:
                condition:
                  lambda: "return id(setmode) > 3;"
                then:
                  - lambda: ESP_LOGD("main", "Menu click. Opening submenu. Setmode is %d", id(setmode));
                  - display.page.show: submenu
                else:
                  - lambda: ESP_LOGD("main", "Menu click. Going back to main page. Setmode is %d", id(setmode));
                  - lambda: |-
                      auto call = id(this_thermostat).make_call();
                      if(id(setmode) == 0) {
                        call.set_mode("OFF");
                        id(currentmode).publish_state("Off");
                      } else if(id(setmode) == 1) {
                        call.set_mode("HEAT_COOL");
                        id(currentmode).publish_state("Ht/Cl");
                      } else if(id(setmode) == 2) {
                        call.set_mode("COOL");
                        id(currentmode).publish_state("Cool");
                        id(set_min_max).publish_state(true);
                      } else if(id(setmode) == 3) {
                        call.set_mode("HEAT");
                        id(currentmode).publish_state("Heat");
                        id(set_min_max).publish_state(false);
                      }
                      call.perform();
                  - display.page.show: mainpage

    on_click:
      - min_length: 600ms
        max_length: 20000ms
        then:
          - display.page.show: menu
    on_double_click:
      - if:
          condition:
            display.is_displaying_page: brightnessmenu
          then:
            - display.page.show: mainpage
          else:
            - display.page.show: brightnessmenu

sensor:
  - platform: dht
    model: DHT22
    pin: D3
    temperature:
      name: "Thermostat Temperature"
      id: internal_temperature
      internal: true
    humidity:
      name: "Thermostat Humidity"
      id: internal_humidity
      internal: true
    update_interval: 10s
    
  - platform: template
    id: oled_brightness

  - platform: rotary_encoder
    id: encoder
    pin_a:
      number: TX
      mode: INPUT_PULLUP
    pin_b:
      number: RX
      mode: INPUT_PULLUP
    on_clockwise:
      - if:
          condition:
            display.is_displaying_page: mainpage
          then:
            - if:
                condition:
                  or:
                    - and:
                        - lambda: "return id(this_thermostat).mode == 1;"
                        - switch.is_on: set_min_max
                    - lambda: "return id(this_thermostat).mode == 2;"
                then:
                  - climate.control:
                      id: this_thermostat
                      target_temperature_high: !lambda "return id(this_thermostat).target_temperature_high + 0.5;"
                else:
                  - climate.control:
                      id: this_thermostat
                      target_temperature_low: !lambda "return id(this_thermostat).target_temperature_low + 0.5;"
      - if:
          condition:
            display.is_displaying_page: menu
          then:
            lambda: |-
              if(id(setmode) < 5) {
                id(setmode) += 1;
                id(menutext).update();
              } else { 
                id(setmode) = 0;
                id(menutext).update();
              }
      - if:
          condition:
            display.is_displaying_page: submenu
          then:
            lambda: |-
              if(id(setmode) == 4) {
                if(id(fansetmode) < 2) {
                  id(fansetmode) += 1;
                  id(fanmenutext).update();
                } else { 
                  id(fansetmode) = 0;
                  id(fanmenutext).update();
                }
              } else {
                if(id(presetmode) == 1) {
                  id(presetmode) = 2;
                  id(presetmenutext).update();
                } else { 
                  id(presetmode) = 1;
                  id(presetmenutext).update();
                }
              }
      - if:
          condition:
            display.is_displaying_page: brightnessmenu
          then:
            - sensor.template.publish:
                id: oled_brightness
                state: !lambda "return id(oled_brightness).state + 0.01;"
            - lambda: "id(oled1).set_brightness(id(oled_brightness).state);"

    on_anticlockwise:
      - if:
          condition:
            display.is_displaying_page: mainpage
          then:
            - if:
                condition:
                  or:
                    - and:
                        - lambda: "return id(this_thermostat).mode == 1;"
                        - switch.is_on: set_min_max
                    - lambda: "return id(this_thermostat).mode == 2;"
                then:
                  - climate.control:
                      id: this_thermostat
                      target_temperature_high: !lambda "return id(this_thermostat).target_temperature_high - 0.5;"
                else:
                  - climate.control:
                      id: this_thermostat
                      target_temperature_low: !lambda "return id(this_thermostat).target_temperature_low - 0.5;"
      - if:
          condition:
            display.is_displaying_page: menu
          then:
            lambda: |-
              if(id(setmode) > 0) {
                id(setmode) -= 1;
                id(menutext).update();
              } else { 
                id(setmode) = 5;
                id(menutext).update();
              }
      - if:
          condition:
            display.is_displaying_page: submenu
          then:
            lambda: |-
              if(id(setmode) == 4) {
                if(id(fansetmode) > 0) {
                  id(fansetmode) -= 1;
                  id(fanmenutext).update();
                } else { 
                  id(fansetmode) = 2;
                  id(fanmenutext).update();
                }
              } else {
                if(id(presetmode) == 1) {
                  id(presetmode) = 2;
                  id(presetmenutext).update();
                } else { 
                  id(presetmode) = 1;
                  id(presetmenutext).update();
                }
              }
      - if:
          condition:
            display.is_displaying_page: brightnessmenu
          then:
            - sensor.template.publish:
                id: oled_brightness
                state: !lambda "return id(oled_brightness).state - 0.01;"
            - lambda: "id(oled1).set_brightness(id(oled_brightness).state);"

climate:
  - platform: thermostat
    name: "Thermostat"
    default_mode: "off" #off, heat_cool, heat, cool
    min_cooling_off_time: 60s
    min_cooling_run_time: 60s
    min_heating_off_time: 60s
    min_heating_run_time: 60s
    min_fan_mode_switching_time: 60s
    min_idle_time: 30s
    away_config:
      default_target_temperature_low: ${away_low}
      default_target_temperature_high: ${away_hi}
    
    cool_deadband: 0.5 #Temp above setvalue to engage
    cool_overrun: 0.5 #Temp below setvalue to disengage
    heat_deadband: 0.5 #Temp below setvalue to engage
    heat_overrun: 0.5 #Temp above setvalue to disengage
    
    visual:
      min_temperature: 15 °C
      max_temperature: 30 °C
    id: this_thermostat
    sensor: internal_temperature

    default_target_temperature_low: ${default_low}
    default_target_temperature_high: ${default_hi}

    cool_action:
      - switch.turn_on: relay_fan
      - switch.turn_on: relay_cooler
      - switch.turn_off: relay_heater

    heat_action:
      - switch.turn_on: relay_fan
      - switch.turn_on: relay_heater
      - switch.turn_off: relay_cooler
           
    fan_mode_auto_action:
      - while:
          condition:
            lambda: "return id(this_thermostat).fan_mode == 2;"
          then:
          - switch.turn_on: relay_fan
          - delay: ${fan_auto_on_time}
          - if:
              condition:
                -  switch.is_off: relay_cooler
                -  switch.is_off: relay_heater
              then:
                - switch.turn_off: relay_fan
                - switch.turn_off: relay_heater
                - switch.turn_off: relay_cooler
          - delay: ${fan_auto_off_time}
    
    fan_mode_on_action:
      - switch.turn_on: relay_fan
            
    fan_mode_off_action:
      - if:
          condition:
            -  switch.is_off: relay_heater
            -  switch.is_off: relay_cooler
          then:
            - switch.turn_off: relay_fan
            - switch.turn_off: relay_heater
            - switch.turn_off: relay_cooler

    idle_action:
      - switch.turn_off: relay_fan
      - switch.turn_off: relay_cooler
      - switch.turn_off: relay_heater

display:
  - platform: ssd1306_i2c
    id: oled1
    update_interval: 0.5s
    brightness: 0.4
    model: "SH1106 128x64"
    rotation: 180
    address: 0x3C
    pages:
      - id: mainpage
        lambda: |-
          // --- Top ---
          if (id(relay_heater).state) {id(ani_fire).next_frame(); it.image(0, 0, id(ani_fire));}
          else if (id(relay_cooler).state) {id(ani_snow).next_frame(); it.image(0, 0, id(ani_snow));}
          else if (id(relay_fan).state) {id(ani_fan).next_frame(); it.image(0, 0, id(ani_fan));}
          if (id(this_thermostat).preset == 2) {it.print(32, 0, id(font1), TextAlign::TOP_CENTER, "A-");}
          it.print(64, 0,  id(font1), TextAlign::TOP_CENTER, id(currentmode).state.c_str());
          it.printf(128, 10, id(font3), TextAlign::BASELINE_RIGHT, " %2.0f%%", id(internal_humidity).state);
          
          // --- Middle ---
          it.printf(64, 4, id(font2), TextAlign::TOP_CENTER, " %.1f°", id(internal_temperature).state);
          
          // --- Bottom ---
          it.printf(0, 64, id(font3), TextAlign::BASELINE_LEFT, "L:%.1f°", id(this_thermostat).target_temperature_low);
          it.printf(128, 64, id(font3), TextAlign::BASELINE_RIGHT, "H:%.1f°", id(this_thermostat).target_temperature_high);

          if (id(set_min_max).state) {it.image(56, 51, id(arrow_right));}
          else {it.image(56, 51, id(arrow_left));}
      - id: menu
        lambda: |-
          // Display current mode at the top
          if (id(this_thermostat).preset == 2) {it.print(32, 0,  id(font1), TextAlign::TOP_CENTER, "A-");}
          it.print(64, 0, id(font1), TextAlign::TOP_CENTER, id(currentmode).state.c_str());
          
          // Menu for selecting a new mode
          it.print(64, 25, id(font4), TextAlign::TOP_CENTER, id(menutext).state.c_str());
      - id: submenu
        lambda: |-
          if (id(setmode) == 5) {
            if (id(this_thermostat).preset == 2) {it.print(64, 0,  id(font1), TextAlign::TOP_CENTER, "Away");}
            else if (id(this_thermostat).preset == 1) {it.print(64, 0,  id(font1), TextAlign::TOP_CENTER, "Home");}
            
            it.print(64, 25, id(font4), TextAlign::TOP_CENTER, id(presetmenutext).state.c_str());
            
            it.printf(64, 64, id(font3), TextAlign::BASELINE_CENTER, "Preset");
          } else if (id(setmode) == 4){
            if (id(this_thermostat).fan_mode == 0) {it.print(64, 0,  id(font1), TextAlign::TOP_CENTER, "On");}
            else if (id(this_thermostat).fan_mode == 1) {it.print(64, 0,  id(font1), TextAlign::TOP_CENTER, "Off");}
            else if (id(this_thermostat).fan_mode == 2) {it.print(64, 0,  id(font1), TextAlign::TOP_CENTER, "Auto");}
            
            it.print(64, 25, id(font4), TextAlign::TOP_CENTER, id(fanmenutext).state.c_str());
            
            it.print(64, 64, id(font3), TextAlign::BASELINE_CENTER, "Fan Mode");
          } else {it.print(64, 4, id(font2), TextAlign::TOP_CENTER, "Shit");}
      - id: brightnessmenu
        lambda: |-
          if (id(relay_heater).state) {id(ani_fire).next_frame(); it.image(0, 0, id(ani_fire));}
            else if (id(relay_cooler).state) {id(ani_snow).next_frame(); it.image(0, 0, id(ani_snow));}
            else if (id(relay_fan).state) {id(ani_fan).next_frame(); it.image(0, 0, id(ani_fan));}
          it.print(64, 0,  id(font1), TextAlign::TOP_CENTER, id(currentmode).state.c_str());
          it.printf(64, 4, id(font2), TextAlign::TOP_CENTER, " %.0f%%", id(oled_brightness).state*100);
          it.image(56, 51, id(bulb));
      - id: icontestpage
        lambda: |-
          id(ani_fire).next_frame(); it.image(0, 0, id(ani_fire));
          id(ani_snow).next_frame(); it.image(32, 0, id(ani_snow));
          id(ani_fan).next_frame(); it.image(64,0, id(ani_fan));
          it.image(0, 32, id(home_thermometer));
          it.image(32, 32, id(snowflake));

animation:
  - file: "icons/thermostat/fan.gif"
    id: ani_fan
  - file: "icons/thermostat/fire.gif"
    id: ani_fire
  - file: "icons/thermostat/snow.gif"
    id: ani_snow
image:
  - file: "icons/thermostat/home-thermometer.png"
    id: home_thermometer
  - file: "icons/thermostat/snowflake.png"
    id: snowflake
  - file: "icons/thermostat/arrow-left-circle-outline.png"
    id: arrow_left
    dither: FLOYDSTEINBERG
  - file: "icons/thermostat/arrow-right-circle-outline.png"
    id: arrow_right
  - file: "icons/thermostat/lightbulb-on-outline.png"
    id: bulb
font:
  - file: "fonts/nasalization.ttf"
    id: font1
    size: 12
  - file: "fonts/refsan.ttf"
    id: font2
    size: 42
  - file: "fonts/refsan.ttf"
    id: font3
    size: 13
  - file: "fonts/refsan.ttf"
    id: font4
    size: 21